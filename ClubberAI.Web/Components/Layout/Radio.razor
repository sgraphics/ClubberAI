@using ClubberAI.ServiceDefaults.Model
@using ClubberAI.ServiceDefaults.Services
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject MusicService MusicService
@inject AudioPlayerService AudioPlayerService
@implements IDisposable

<div class="radio-player" style="display:none">
    <h3>Location Radio</h3>
    
    @if (!_isInitialized)
    {
        <button class="start-btn" @onclick="InitializeRadio">Start Radio</button>
    }
    else if (_channels?.data?.categories != null)
    {
        <div class="channel-list">
            @foreach (var category in _channels.data.categories)
            {
                <div class="category">
                    <h4>@category.name</h4>
                    @foreach (var group in category.groups)
                    {
                        <div class="group">
                            <h5>@group.name</h5>
                            <div class="channels">
                                @foreach (var channel in group.channels)
                                {
                                    <button class="channel-btn @(channel.playlist == _currentPlaylist ? "active" : "")" 
                                            @onclick="() => PlayChannel(channel.playlist)">
                                        @channel.name
                                    </button>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>

        <div class="controls">
            <select @bind="@_intensity">
                <option value="Low">Low Intensity</option>
                <option value="Medium">Medium Intensity</option>
                <option value="High">High Intensity</option>
            </select>
        </div>
    }
    else
    {
        <p>Loading channels...</p>
    }

</div>

<span class="audio-controls">
    @if (_audioStatus == "playing")
    {
        <i class="fas fa-stop" @onclick="StopAudio"></i>
    }
    else if (_audioStatus == "waiting")
    {
        <i class="fas fa-sync-alt fa-spin"></i>
    }
    else if (_audioStatus == "pause")
    {
        <i class="fas fa-play" @onclick="ResumeAudio"></i>
    }
    @if (_isMuted)
    {
        <i class="fas fa-volume-mute" @onclick="ToggleMute"></i>
    }
    else
    {
        <i class="fas fa-volume-up" @onclick="ToggleMute"></i>
    }
</span>
<audio id="radioPlayer" src="@(_currentStream ?? string.Empty)" autoplay></audio>

@code {
    private GetChannelsResponse _channels;
    private string _currentStream;
    private string _currentPlaylist;
    private bool _isInitialized = false;
    private string? Pat;
    private MubertIntensity _intensity = MubertIntensity.High;
    private IDisposable _subscription;
    private string _audioStatus = "";
    private DotNetObjectReference<Radio> objRef;
    private bool _isMuted = false;

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var stream = await AudioPlayerService.GetPlaylistStream();
            _subscription = stream.Subscribe(async playlist =>
            {
                await PlayChannel(playlist);
            });

            // Pass the component reference to JS
            await JS.InvokeVoidAsync("nearWallet.setupAudioEvents", objRef);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task InitializeRadio()
    {
	    Pat = await MusicService.InitializeMubertAsync();
        _channels = await MusicService.GetChannelsAsync();
        _isInitialized = true;
        StateHasChanged();
    }

    private async Task PlayChannel(string playlist)
    {
	    if (!string.IsNullOrWhiteSpace(playlist))
	    {
		    _audioStatus = "waiting";
	    }
	    else
	    {
		    await StopAudio();
		    return;
	    }
	    Pat ??= await MusicService.InitializeMubertAsync();
        _currentStream = $"https://stream.mubert.com/b2b/v2?playlist={playlist}&pat={Pat}&intensity={_intensity.ToString().ToLower()}";
        _currentPlaylist = playlist;
        await AudioPlayerService.Play(playlist);
        await InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        _subscription?.Dispose();
        objRef?.Dispose();
        try
        {
            JS.InvokeVoidAsync("nearWallet.cleanupAudioEvents");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error cleaning up audio events: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnAudioStateChange(string state)
    {
        _audioStatus = state;
        await InvokeAsync(StateHasChanged);
    }

    private async Task StopAudio()
    {
        try
        {
            await JS.InvokeVoidAsync("stopAudio");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error stopping audio: {ex.Message}");
        }
    }

    private async Task ToggleMute()
    {
        try
        {
            _isMuted = await JS.InvokeAsync<bool>("toggleMute");
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error toggling mute: {ex.Message}");
        }
    }

    private async Task ResumeAudio()
    {
        try
        {
            await JS.InvokeVoidAsync("resumeAudio");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error resuming audio: {ex.Message}");
        }
    }
}
